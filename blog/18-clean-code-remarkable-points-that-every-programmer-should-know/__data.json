{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"slug":2,"post":3},"18 Clean Code Remarkable Points That Every Programmer Should Know","18-clean-code-remarkable-points-that-every-programmer-should-know","\u003Ch1>18 Clean code remarkable points that every programmer should know\u003C/h1>\n\u003Ch4>20 Aug, 2023\u003C/h4>\n\u003Cp>&nbsp;\u003C/p>\n\u003Cp>These are some clean code principles distilled from a classic book called \u003Cstrong>&quot;Clean Code: A Handbook of Agile Software Craftsmanship&quot;\u003C/strong> by \u003Cstrong>Robert C. Martin\u003C/strong>. Here are some remarkable points that I think will benefit us programmers in the long run:\u003C/p>\n\u003Cp>&nbsp;\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ch6>1. Meaningful Names:\u003C/h6>\n\u003Cp> Use descriptive and meaningful names for variables, functions, classes, and modules. Names should convey the purpose and intent of the code.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>2. Functions:\u003C/h6>\n\u003Cp> Keep functions short, with a single responsibility. Functions should do one thing and do it well. Aim for functions that fit within a single screen.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>3. Comments:\u003C/h6>\n\u003Cp> Strive to write code that is self-explanatory without the need for excessive comments. Comments should be used sparingly and only when necessary to clarify complex parts.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>4. Formatting:\u003C/h6>\n\u003Cp> Consistent formatting enhances readability. Follow a consistent style for indentation, spacing, and line length. Use vertical spacing to separate related code blocks.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>5. Single Responsibility Principle (SRP):\u003C/h6>\n\u003Cp> Each class or module should have a single responsibility or reason to change. Avoid creating classes that are responsible for multiple tasks.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>6. Open/Closed Principle (OCP):\u003C/h6>\n\u003Cp> Code should be open for extension but closed for modification. Accommodate new features by extending existing code rather than modifying it.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>7. Don&#39;t Repeat Yourself (DRY):\u003C/h6>\n\u003Cp> Avoid duplicating code. Reuse code through abstraction and encapsulation to eliminate redundancy.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>8. Small, Focused Classes:\u003C/h6>\n\u003Cp> Create small and focused classes that encapsulate a single concept or functionality. This leads to more modular and maintainable code.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>9. Testing:\u003C/h6>\n\u003Cp> Write tests that validate the behavior of your code. Automated tests help ensure that changes don&#39;t introduce unintended bugs.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>10. Readable Code:\u003C/h6>\n\u003Cp> Write code that reads like well-written prose. Strive for code that is easy to understand and follow.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>11. Refactoring:\u003C/h6>\n\u003Cp> Continuously improve the codebase through refactoring. Refactoring involves making small changes to improve code structure without changing its external behavior.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>12. Code Smells:\u003C/h6>\n\u003Cp> Be aware of common code smells, such as long functions, large classes, and duplicated code. Addressing these issues leads to cleaner code.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>13. Limit Function Arguments:\u003C/h6>\n\u003Cp> Limit the number of arguments a function takes to enhance its readability and maintainability.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>14. Dependency Injection:\u003C/h6>\n\u003Cp> Use dependency injection to provide the necessary dependencies to a class rather than having the class create them itself.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>15. Separation of Concerns:\u003C/h6>\n\u003Cp> Divide your code into separate layers or modules that handle different concerns. This promotes better organization and maintainability.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>16. Keep It Simple:\u003C/h6>\n\u003Cp> Avoid overengineering and unnecessary complexity. Strive for the simplest solution that meets the requirements.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>17. Code Review:\u003C/h6>\n\u003Cp> Regularly review code with colleagues to ensure adherence to coding standards and to catch potential issues early.\u003C/p>\n\u003C/li>\n\u003Cli>\u003Ch6>18. Version Control:\u003C/h6>\n\u003Cp> Use version control systems to track and manage changes to your codebase. This aids collaboration and provides a safety net for code changes.\u003C/p>\n\u003C/li>\n\u003C/ul>\n"],"uses":{"params":["slug"]}}]}
